Option Compare Text
Public assClass As String

Public Function autoHeaderUniquinizerIngestF()
' Developed by Delfino Ballesteros
' May 12, 2018
    
    
    abortIt = False
    endIt = False
    Application.ScreenUpdating = False
   ' autoHeader2
    
    If endIt = True Then
        Exit Function
    End If
       
    Dim i As Integer
    Dim rCount As Integer
    
    
    'creating Asset Class portion of the UTI / Trade ID
    'On Error GoTo handleErrorAsset
    Cells.Find(What:="primary asset class", After:=ActiveCell, LookIn:=xlFormulas, _
    LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
    MatchCase:=False, SearchFormat:=False).Activate
    

    ActiveCell.Offset(1, 0).Select
    
    'AssetClass abbreviations:
    If ActiveCell.Value = "ForeignExchange" Then
        assClass = "FX_"
    ElseIf ActiveCell.Value = "InterestRate" Then
        assClass = "IR_"
    ElseIf ActiveCell.Value = "Commodity" Then
        assClass = "CO_"
    ElseIf ActiveCell.Value = "Equity" Then
        assClass = "EQ_"
    ElseIf ActiveCell.Value = "Credit" Then
        assClass = "CR_"
    End If
    

    findTradeIdField
    
    If endIt = True Then
        Exit Function
    End If
    
    rCount = getRCount
       
    findTradeIdField
    
    idColumn = ActiveCell.Column
     
    'sets the new tradeID
  
    For i = 1 To numOfTrades
            ActiveCell.Value = formatTradeId(rCount)
            Set getback = ActiveCell
            rCount = getLastFour
            ActiveCell.Offset(1, 0).Select
    Next i

    'does exit trade check.
    exitCheck
    'copies UTI to USI in CORE templates
    usiCheck (idColumn)
    
    If endIt = True Then
        Exit Function
    End If
    
    Application.ScreenUpdating = True
    Columns.AutoFit
    
    'brings the active cell to the bottom of the TradeID column
    Cells(1, idColumn).Select
    Selection.End(xlDown).Select
    ActiveCell.Offset(1, 0).Select

    Exit Function
    
handleErrorAsset:
    MsgBox "No 'Primary Asset Class' field was found", vbInformation, "WARNING!"
    Exit Function
   
End Function
Function usiCheck(idColumn)

    findIt ("USI Value")
    If usiActive = True Then
            ActiveCell.Offset(1, 0).Select
            Set searchPosition = ActiveCell
            thisRow = ActiveCell.Row
            Cells(thisRow, idColumn).Select
            Range(Selection, Selection.End(xlDown)).Select
            Selection.Copy
            Cells(searchPosition.Row, searchPosition.Column).Select
            ActiveSheet.Paste
            Application.CutCopyMode = False
    End If
    
End Function

Function exitCheck()

        Dim lastRecordRow As Integer
        Dim idColumn As Integer
        
        findTradeIdField
        idColumn = ActiveCell.Column
        
        Range("A1").Select
        
On Error GoTo handleErrorAction
Again:
        Cells.Find(What:="action", After:=ActiveCell, LookIn:=xlFormulas, LookAt _
        :=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
        False, SearchFormat:=False).Activate
        If ActiveCell.Value <> "Action" Then GoTo Again
        actionColumn = ActiveCell.Column
        Selection.End(xlDown).Select
        lastRecordRow = ActiveCell.Row
                
        Selection.End(xlUp).Select
        ActiveCell.Offset(2, 0).Select
        
        For i = 3 To lastRecordRow
            If ActiveCell.Value = "exit" Then
                goback = ActiveCell.Row
                Cells(goback, 1).Select
                tradeName = ActiveCell.Value
                Columns("A:A").Select
                Selection.Find(What:=tradeName, After:=ActiveCell, _
                LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, _
                SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False).Activate
             
                If ActiveCell.Value = tradeName And ActiveCell.Offset(0, actionColumn - 1).Value = "new" Then
                    ActiveCell.Offset(0, idColumn - 1).Select
                    tradeid = ActiveCell.Value
                    Cells(goback, idColumn).Value = tradeid
                End If
            
                Cells(goback, actionColumn).Select
            End If
            ActiveCell.Offset(1, 0).Select
         Next i
        
        
        'Reset match case and entire contents
        Cells.Replace What:="", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
    Exit Function
    
handleErrorAction:
     MsgBox "No 'Action' field was found", vbInformation, "WARNING!"
    'Reset match case and entire contents
     Cells.Replace What:="", Replacement:="", LookAt:=xlPart, _
     SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
     ReplaceFormat:=False
     endIt = True
     Exit Function

End Function

Public Function findTradeIdField()

    findID
    If foundOne = True Then
        ActiveCell.Offset(1, 0).Select
    Else
        endIt = True
    End If
        
End Function

Function formatTradeId(count As Integer) As String

    Dim harn As String
    Dim counter As String
    Dim newFour As Integer
    Dim dt As String

    harn = "HARNESS_AUTO_"
    dt = todaysDate
    newFour = count + 1                               'Adds 1 to the current count
    counter = Format(newFour, "0000")                 'Formats counter to 4 digits
    tradeid = harn & assClass & dt & "_" & counter    'Concatenates new tradeId
    formatTradeId = tradeid
    
End Function

Function IncrementTradeId(count As Integer) As String

    Dim harn As String
    Dim counter As String
    Dim currFour As Integer
    Dim dt As String
   
   
    tradeid = ActiveCell.Value              'Save the value to the variable Val
  
    harn = getTradeIdPrefix                 'Extract the first 13 digits of tradeId
    dt = todaysDate                         'Gets todays date and saves to dt
    newFour = count + 1                     'Adds 1 to the current count
    cFour = Format(newFour, "0000")         'Increment counter by 1
    counter = CStr(cFour)
    
    newTradeId = harn & assClass & dt & "_" & counter   'Concatenate tradeId
    IncrementTradeId = newTradeId                       'Post new tradeId
End Function

Function getRCount()
    Dim runningCounter As Integer
    Dim currCount As Integer
    Dim today As String
   
    today = todaysDate
    
    For i = 1 To numOfTrades
        If ActiveCell.Value <> Empty Then
            If tradeIdDate = today Then
                currCount = getLastFour
                If currCount > runningCounter Then
                    runningCounter = currCount
                    ActiveCell.Offset(1, 0).Select
                Else
                    ActiveCell.Offset(1, 0).Select
                End If
            Else
                ActiveCell.Offset(1, 0).Select
            End If
        Else
            ActiveCell.Offset(1, 0).Select
        End If
    Next i
    getRCount = runningCounter
End Function

Function todaysDate() As String
    Dim dt As Date
    Dim tdate As String
    dt = Date
    fdate = Format(dt, "yyyymmdd")          'Formats date to yyyymmdd
    tdate = CStr(fdate)                     'Converts Date to string
    todaysDate = tdate                      'Saves converted date string to function return
End Function

Function getTradeIdPrefix()
    tradeid = ActiveCell.Value              'Save the value to the variable tradeId
    Prefix = Left(tradeid, 13)              'Extract the prefix from trade Id
    getTradeIdPrefix = Prefix               'Returns the prefix string value as function value
End Function

Function tradeIdDate()
   
    Dim moveIt As Integer
    tradeid = ActiveCell.Value                          'Save the value to the variable tradeId
    datePortion = Mid(tradeid, 14 + Len(assClass), 8)   'Extract the Date from trade Id
    tradeIdDate = datePortion                           'Saves date as string to function
End Function

Function getLastFour()
    tradeid = ActiveCell.Value              'Save the value to the variable tradeId
    counter = Right(tradeid, 4)             'Extract the last three digits
    getLastFour = CInt(counter)             'Convert string to integer and save
End Function

Function headerCount() As Integer
    'Determines the number of header columns by counting the first 5 rows containing
    'an asterisk(*) in column 1.
    headerCount = Application.WorksheetFunction.CountIf(Range("A1:A5"), "~**")
    Debug.Print headerCount
End Function

Function totalNumRows() As Integer
    'Determines the total number of populated rows that are filled in by referencing
    'column B since this column will always be filled out for every applicalbe trade.
    With ActiveSheet
    totalNumRows = .Cells(.Rows.count, "B").End(xlUp).Row
    End With
    Debug.Print totalNumRows
End Function

Function numOfTrades() As Integer
    'Returns the actual number of trades by subtracting the header rows from the
    'total rows and returning the differnce
    numOfTrades = totalNumRows - headerCount
    Debug.Print numOfTrades
End Function

